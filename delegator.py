
def make_coroutine(func):
    def inner(*args, **kwargs):
        g = func(*args, **kwargs)
        g.send(None)
        return g

    return inner


# class MyException(Exception):
#     pass


def yield_coroutine():
    """
    Это функция subgen() определяет генератор-корутину,
    которая ожидает получения значений приостановления выполнения с помощью оператора yield.
    л while внутри генератора выполняется бесконечно, пока не возникнет исключение StopIteration, передаваемое из вызывающего кода.
    Когда генератор останавливается на операторе yield, значение, которое было отправлено из вызывающего кода методом send(),
    сохраняется в переменной massage.
    Затем это значение распечатывается в консоль.
    Использование оператора else после блока обработки исключения try-except позволяет выполнить дополнительный код,
    если исключение не было возбуждено.
    По завершению работы цикла while функция возвращает строку "Returned from subgen()".
    """

    while True:
        try:
            massage = yield
        except StopIteration:
            break
        else:
            print('корутина', massage)
    return 'Returned from subgen()'


@make_coroutine
def delegate_coroutine(g):
    """
    Эта функция является генератор-корутиной,
    которая делегирует выполнение другой генератор-корутины g.
    Внутри функции используется ключевое слово yield from,
    чтобы перенаправить выполнение генератора g до тех пор,
    пока он не будет завершен или не вызовет исключение.
    Значение, возвращаемое g, сохраняется в переменной result,
    а затем распечатывается в консоль.
    Таким образом, эта генератор-корутина
    предназначена для обработки результатов выполнения других генераторов-корутин.
    """
    result = yield from g
    # может накапливать результат,
    # но корутине дожлен быть возрат этих результатах

    print(result)
    # код ниже то что делает yield from за нас
    # while True:
    #     try:
    #         data = yield
    #         g.send(data)
    #     except MyException as e:
    #         g.throw(e)


sg = yield_coroutine()
g = delegate_coroutine(sg)

print(g.send('hi'))
g.send('frends') 
# send()отправляют соответствующие значения в генератор-корутину g
# и возобновляют её выполнение.
# При каждом вызове генератор-корутина g делегирует выполнение
# генератору-корутине sg,
# которая выводит соответствующее сообщение в консоль.
print(g.send('my'))
print(g.send('frends'))
# throw() на объекте генератора g,
# чтобы передать исключение StopIteration в генератор-корутину sg.
# Это приводит к завершению цикла while внутри генератора subgen()
# и возврату значения "Returned from subgen()" из генератора.
print(g.throw(StopIteration))
